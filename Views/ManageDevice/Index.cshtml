@model IEnumerable<My_Dashboard.Models.DB.Machine>
<head>
    <script src="~/lib/axios/axios.min.js"></script>
    <script src="~/lib/vue/vue.global.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

</head>
<div class="content-wrapper" id="myArea">
    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div ref="container"></div>
            </div>
            <div class="row">
                <div class="col-sm-8">
                    <div class="d-flex justify-content-end mb-3"> <button class=" btn btn-dark" @@click="restartService">Restart Service</button></div>
                   
                    <div class="card">

                     <div class="card-header border-0">
                        <div class="row">
                                <div class="col-sm-6">
                                <span class="card-title">List Of Devices</span>
                            </div>
                                <div class="col-sm-6 d-flex justify-content-end">
                                <div class="">
                                        <button class="btn btn-success" @@click="addNewMachine()">Add</button>
                                </div>
                           </div>
                      </div>
                     </div>
                    <div class="card-body">
                            <div class="row d-flex justify-content-end">
                                <div class="col-sm-2 mb-2">
                                    <input class="form-control" type="text" v-model="filter" placeholder="Search.." />
                                </div>

                            </div>

                            <div class="table-responsive">
                               
                               
                            <table id="myTable" class="table table-hover table-light table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Active</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                                    <tbody>

                                        <tr :class="{'table-danger':props[index].newEntry}" v-for="(machine, index) in filterByNameContains(machines,filter)" :key="index">
                                            <td> <span class="me-4">{{machine.machineId}}</span></td>
                                            <td> <input class="form-control" :disabled="props[index].disabled" placeholder="enter device name" type="text" v-model="machine.name" /> </td>
                                            <td><div class="form-check form-switch">
                                                    <input class="form-check-input" v-model="machine.isActive" @@change="updateMachine(machine);" style="height:25px;width:50px" type="checkbox" id="flexSwitchCheckChecked" checked>
                                                </div>
                                            </td>
                                            <td class="">
                                                <div v-if="!props[index].newEntry">
                                                    <button v-show="props[index].visible" class="btn btn-primary me-2" @@click='props[index].visible= !props[index].visible;props[index].disabled= !props[index].disabled;'>Edit</button>
                                                    <button v-show="props[index].visible" class="btn btn-warning" @@click="machineModalHolder = machine;" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button>
                                                    <button v-show="!props[index].visible" class="btn btn-outline-primary me-2" @@click="updateMachine(machine); props[index].visible= !props[index].visible;props[index].disabled= !props[index].disabled;">Update</button>
                                                    <button v-show="!props[index].visible" class="btn btn-close" @@click="props[index].visible= !props[index].visible;props[index].disabled= !props[index].disabled;"></button>
                                                    
                                                </div>
                                                <div v-if="props[index].newEntry">
                                                    <button class="btn btn-success me-2" @@click='saveMachine(machine,props[index])'>Save</button>
                                                    <button class="btn btn-close ms-3" @@click="machines.splice(index,1); props.splice(index,1);"></button>
                                                </div>
                                            </td>
                                        </tr>
 
                                    
                            @*     @foreach(var machine in Model)
                                {
                                    <tr>
                                        <td> <span class="me-4">@machine.MachineId</span></td>
                                        <td>@machine.Name</td>
                                        <td>@machine.IsActive</td>
                                                <td> <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @@click='EditRow(@Html.Raw(Json.Serialize(machine)))'>Edit</button> <button class="btn btn-warning">Delete</button> </td>
                                    </tr>
                                } *@
                                
                            </tbody>
                        </table>
                            </div>
                    </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



<!-- Modal -->
    <div class="modal fade" id="deleteModal" v-if="showModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete this machine?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="card text-white bg-danger mb-3">
                        <div class="card-header"> <h3>{{machineModalHolder?.name}}</h3></div>
                    <div class="card-body">
                        <h5 class="card-title">Alert !</h5>
                        <p class="card-text">This action will delete Kafka Topic associated with this device as well</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" ref="myButton">Close</button>
                    <button type="button" class="btn btn-primary" @@click="deleteMachine(machineModalHolder);">Save changes</button>
            </div>
        </div>
    </div>
</div>


</div>

@* <link href="https://cdn.datatables.net/v/bs5/dt-2.0.8/r-3.0.2/datatables.min.css" rel="stylesheet">

<script src="https://cdn.datatables.net/v/bs5/dt-2.0.8/r-3.0.2/datatables.min.js"></script *@
@* <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script> *@


<script type="module">

    const { createApp, ref, onMounted } = Vue;

    const app = createApp({
        setup() {

            const machinesData = @Html.Raw(Json.Serialize(Model));
           // console.log(machinesData);

            const machines = ref(machinesData);
            const machineModalHolder = ref(null);
            const showModal = ref(true);
            const filter = ref('');
            const container = ref(null);

            function toast(msg , mode) {
                let style = "";
                if (mode === "info")
                    style = "linear-gradient(to right, #00b09b, #96c93d)";
                else if (mode === "alert")
                    style = "linear-gradient(to right, #ff0000, #ff6666)";

                Toastify({
                    text: msg,
                    duration: 2000,
                    destination: "",
                    newWindow: true,
                    close: false,
                    gravity: "top", // `top` or `bottom`
                    position: "center", // `left`, `center` or `right`
                    stopOnFocus: true, // Prevents dismissing of toast on hover
                    style: {
                        background: style,
                    },
                    onClick: function () { } // Callback after click
                }).showToast();
                //machines.value.splice(0, 1);

            }


            function restartService() {
                axios.post('@Url.Action("RestartService")', null)
                    .then(function (response) {

                        console.log(response.data.result);
                        toast("Service Restart Successfully","info");

                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            }

            function saveMachine(machineObj, propsObj) {

                axios.post('@Url.Action("Add")',
                    machineObj

                )
                    .then(function (response) {

                        if (response.data.result > 0) {
                            machineObj.machineId = response.data.result;
                            propsObj.visible = true;
                            propsObj.disabled = true;
                            propsObj.newEntry = false;
                            toast("Device added successfully", "info");

                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            }

            function updateMachine(machineObj) {
                axios.post('@Url.Action("Update")',
                    machineObj

                )
                    .then(function (response) {
                        console.log(response.data.result);

                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            }


            function deleteMachine(machineObj) {
                axios.post('@Url.Action("Delete")',
                    machineObj

                )
                    .then(function (response) {
                        console.log(response.data.result);
                        if (response.data.result === "OK") {
                            const index = machines.value.findIndex(machine => machine.machineId === machineObj.machineId);
                            // If the product is found, delete it
                            if (index !== -1) {
                                machines.value.splice(index, 1);
                                props.value.splice(index, 1);
                                console.log(`machine with id ${machineObj.machineId} has been deleted.`);
                                toast(`machine with id ${machineObj.machineId} has been deleted.`,"info");
                            } else {
                                console.log(`Product with id ${machineObj.machineId} not found.`);
                                toast(`Product with id ${machineObj.machineId} not found.`, "alert");
                            }


                        }

                    })
                    .catch(function (error) {
                        console.log(error);
                    });

                this.$refs.myButton.click();


            }
            function EditRow(machine) {

                machine.name = "change";
            }

            function filterByNameContains(arr, substring) {
                return arr.filter(machine => machine.name.toLowerCase().includes(substring.toLowerCase()));
            }

            const props = ref([]); //{visible:true,disable:true,newEntry:true}
            machines.value.forEach((machine, index) => {
                props.value.push({ visible: true, disabled: true, newEntry: false });

            });


            onMounted(() => {

                

            });

            // Function to add a new machine
            function addNewMachine() {
                // const newMachine = {
                //     "machineId": ,
                //     "name": "",
                //     "machineTypeId": 1,
                //     "dateTime": "",
                //     "isActive": true,
                //     "machineType": null
                // };


                axios.post('@Url.Action("generateNew")',
                    null

                )
                    .then(function (response) {
                        props.value.push({ visible: true, disabled: false, newEntry: true });
                        machines.value.push(response.data.result);
                        console.log(response.data.result);

                    })
                    .catch(function (error) {
                        console.log(error);
                    });
                // props.value.push({ visible: true, disabled: false , new: true});
                // machines.value.push(newMachine);

                //console.log('onclick');
            }
            // Return the reactive state (empty in this case)
            return { container, machines, machineModalHolder, saveMachine, deleteMachine, EditRow, props, addNewMachine, filter, filterByNameContains, restartService, updateMachine, showModal };
        }
       

    });    
    app.mount('#myArea');

    // Function to add a new machine
    // function addNewMachine() {
    //     console.log('onclick');
    // }
</script>
